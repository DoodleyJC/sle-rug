import IDE;
import Syntax;
import ParseTree;
import AST;
import CST2AST;
import Resolve;
import Check;
import Eval;
import Compile;
import Transform
parse(#start[Form], |project://sle-rug/examples/tax.myql|);

CST2AST
cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|));

RESOLVE
resolve(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)));

CHECK
check(  cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)), collect(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|))), resolve(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|))).useDef);
check( cst2ast(parse(#start[Form], |project://sle-rug/examples/NonMatchingOperandTypes.myql|)), collect(cst2ast(parse(#start[Form], |project://sle-rug/examples/NonMatchingOperandTypes.myql|))), resolve(cst2ast(parse(#start[Form], |project://sle-rug/examples/NonMatchingOperandTypes.myql|))).useDef);

EVAL
eval(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)),  input("sellingPrice", vint(100)), eval(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)), input("hasSoldHouse", vbool(true)),  initialEnv(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)))));


TRANSFORM
flatten(cst2ast(parse(#start[Form], |project://sle-rug/examples/transformTest.myql|)));
rename(parse(#start[Form], |project://sle-rug/examples/tax.myql|), |project://sle-rug/examples/tax.myql|(194,12,<9,4>,<9,16>), "NAMECHANGE", resolve(cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|)))<2>);
rename(parse(#start[Form], |project://sle-rug/examples/transformTest.myql|), |project://sle-rug/examples/transformTest.myql|(108,2,<8,8>,<8,10>), "NAMECHANGE", resolve(cst2ast(parse(#start[Form], |project://sle-rug/examples/transformTest.myql|)))<2>);


Following commands are to do the compiling:
    import IDE;
    import Syntax;
    import ParseTree;
    import CST2AST;
    import Compile;
    f=cst2ast(parse(#start[Form], |project://sle-rug/examples/tax.myql|));
    compile(f);